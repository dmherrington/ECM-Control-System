.TH "DataParameter::AbstractParameter" 3 "Tue Jun 20 2017" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
DataParameter::AbstractParameter \- The \fBAbstractParameter\fP class\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <abstract_parameter\&.h>\fP
.PP
Inherited by \fBDataParameter::ParameterMemoryWrite\fP, \fBDataParameter::SegmentCurrentSetpoint\fP, \fBDataParameter::SegmentTimeDetailed\fP, \fBDataParameter::SegmentTimeGeneral\fP, and \fBDataParameter::SegmentVoltageSetpoint\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBAbstractParameter\fP ()"
.br
.RI "\fBAbstractParameter\fP\&. "
.ti -1c
.RI "\fBAbstractParameter\fP (const int &code)"
.br
.RI "\fBAbstractParameter\fP\&. "
.ti -1c
.RI "virtual \fBDataParameter::ParameterType\fP \fBgetParameterType\fP () const =0"
.br
.RI "getParameterType "
.ti -1c
.RI "virtual QByteArray \fBgetByteArray\fP () const =0"
.br
.RI "getByteArray "
.ti -1c
.RI "virtual std::string \fBgetDescription\fP () const =0"
.br
.RI "getDescription "
.ti -1c
.RI "void \fBsetSlaveAddress\fP (const uint8_t &address)"
.br
.RI "setSlaveAddress "
.ti -1c
.RI "void \fBsetReadorWrite\fP (const \fBData::ReadWriteType\fP &type)"
.br
.RI "setReadorWrite "
.ti -1c
.RI "QByteArray \fBgetFullMessage\fP ()"
.br
.RI "getFullMessage "
.ti -1c
.RI "void \fBoperator=\fP (const \fBAbstractParameter\fP &rhs)"
.br
.RI "operator = "
.ti -1c
.RI "bool \fBoperator==\fP (const \fBAbstractParameter\fP &rhs)"
.br
.RI "operator == "
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBAbstractParameter\fP &rhs)"
.br
.RI "operator != "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "int \fBparameterCode\fP"
.br
.RI "parameterCode "
.ti -1c
.RI "int \fBslaveAddress\fP"
.br
.RI "slaveAddress "
.ti -1c
.RI "\fBData::ReadWriteType\fP \fBreadOrwrite\fP"
.br
.RI "readOrwrite "
.ti -1c
.RI "uint8_t \fBhighChecksum\fP"
.br
.RI "highChecksum "
.ti -1c
.RI "uint8_t \fBlowChecksum\fP"
.br
.RI "lowChecksum "
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "QByteArray \fBgetPrefixByteArray\fP ()"
.br
.RI "getPrefixByteArray "
.ti -1c
.RI "unsigned int \fBCRC16\fP (const QByteArray &array)"
.br
.RI "CRC16\&. "
.in -1c
.SH "Detailed Description"
.PP 
The \fBAbstractParameter\fP class\&. 
.PP
Definition at line 20 of file abstract_parameter\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "DataParameter::AbstractParameter::AbstractParameter ()"

.PP
\fBAbstractParameter\fP\&. 
.PP
Definition at line 5 of file abstract_parameter\&.cpp\&.
.SS "DataParameter::AbstractParameter::AbstractParameter (const int & code)"

.PP
\fBAbstractParameter\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcode\fP 
.RE
.PP

.PP
Definition at line 11 of file abstract_parameter\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "unsigned int DataParameter::AbstractParameter::CRC16 (const QByteArray & array)\fC [private]\fP"

.PP
CRC16\&. 
.PP
\fBParameters:\fP
.RS 4
\fIarray\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Definition at line 54 of file abstract_parameter\&.cpp\&.
.SS "virtual QByteArray DataParameter::AbstractParameter::getByteArray () const\fC [pure virtual]\fP"

.PP
getByteArray 
.PP
\fBReturns:\fP
.RS 4

.RE
.PP

.PP
Implemented in \fBDataParameter::SegmentTimeGeneral\fP, \fBDataParameter::SegmentVoltageSetpoint\fP, \fBDataParameter::SegmentTimeDetailed\fP, \fBDataParameter::SegmentCurrentSetpoint\fP, and \fBDataParameter::ParameterMemoryWrite\fP\&.
.SS "virtual std::string DataParameter::AbstractParameter::getDescription () const\fC [pure virtual]\fP"

.PP
getDescription 
.PP
\fBReturns:\fP
.RS 4

.RE
.PP

.PP
Implemented in \fBDataParameter::SegmentTimeGeneral\fP, \fBDataParameter::SegmentTimeDetailed\fP, \fBDataParameter::SegmentCurrentSetpoint\fP, \fBDataParameter::SegmentVoltageSetpoint\fP, and \fBDataParameter::ParameterMemoryWrite\fP\&.
.SS "QByteArray DataParameter::AbstractParameter::getFullMessage ()"

.PP
getFullMessage 
.PP
\fBReturns:\fP
.RS 4

.RE
.PP

.PP
Definition at line 40 of file abstract_parameter\&.cpp\&.
.SS "virtual \fBDataParameter::ParameterType\fP DataParameter::AbstractParameter::getParameterType () const\fC [pure virtual]\fP"

.PP
getParameterType 
.PP
\fBReturns:\fP
.RS 4

.RE
.PP

.PP
Implemented in \fBDataParameter::SegmentTimeGeneral\fP, \fBDataParameter::SegmentTimeDetailed\fP, \fBDataParameter::SegmentCurrentSetpoint\fP, \fBDataParameter::SegmentVoltageSetpoint\fP, and \fBDataParameter::ParameterMemoryWrite\fP\&.
.SS "QByteArray DataParameter::AbstractParameter::getPrefixByteArray ()\fC [private]\fP"

.PP
getPrefixByteArray 
.PP
\fBReturns:\fP
.RS 4

.RE
.PP

.PP
Definition at line 27 of file abstract_parameter\&.cpp\&.
.SS "bool DataParameter::AbstractParameter::operator!= (const \fBAbstractParameter\fP & rhs)\fC [inline]\fP"

.PP
operator != 
.PP
\fBParameters:\fP
.RS 4
\fIrhs\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Definition at line 123 of file abstract_parameter\&.h\&.
.SS "void DataParameter::AbstractParameter::operator= (const \fBAbstractParameter\fP & rhs)\fC [inline]\fP"

.PP
operator = 
.PP
\fBParameters:\fP
.RS 4
\fIrhs\fP 
.RE
.PP

.PP
Definition at line 84 of file abstract_parameter\&.h\&.
.SS "bool DataParameter::AbstractParameter::operator== (const \fBAbstractParameter\fP & rhs)\fC [inline]\fP"

.PP
operator == 
.PP
\fBParameters:\fP
.RS 4
\fIrhs\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Definition at line 98 of file abstract_parameter\&.h\&.
.SS "void DataParameter::AbstractParameter::setReadorWrite (const \fBData::ReadWriteType\fP & type)"

.PP
setReadorWrite 
.PP
\fBParameters:\fP
.RS 4
\fItype\fP 
.RE
.PP

.PP
Definition at line 22 of file abstract_parameter\&.cpp\&.
.SS "void DataParameter::AbstractParameter::setSlaveAddress (const uint8_t & address)"

.PP
setSlaveAddress 
.PP
\fBParameters:\fP
.RS 4
\fIaddress\fP 
.RE
.PP

.PP
Definition at line 17 of file abstract_parameter\&.cpp\&.
.SH "Member Data Documentation"
.PP 
.SS "uint8_t DataParameter::AbstractParameter::highChecksum\fC [protected]\fP"

.PP
highChecksum 
.PP
Definition at line 154 of file abstract_parameter\&.h\&.
.SS "uint8_t DataParameter::AbstractParameter::lowChecksum\fC [protected]\fP"

.PP
lowChecksum 
.PP
Definition at line 159 of file abstract_parameter\&.h\&.
.SS "int DataParameter::AbstractParameter::parameterCode\fC [protected]\fP"

.PP
parameterCode 
.PP
Definition at line 139 of file abstract_parameter\&.h\&.
.SS "\fBData::ReadWriteType\fP DataParameter::AbstractParameter::readOrwrite\fC [protected]\fP"

.PP
readOrwrite 
.PP
Definition at line 149 of file abstract_parameter\&.h\&.
.SS "int DataParameter::AbstractParameter::slaveAddress\fC [protected]\fP"

.PP
slaveAddress 
.PP
Definition at line 144 of file abstract_parameter\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
